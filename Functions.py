# -*- coding: utf-8 -*-
"""Functions.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yyy_cZldykgxxb0ms8i4ZcapminEhoaL
"""

import pickle
import numpy as np
from tqdm import tqdm 
from skimage import data
from skimage import filters 
from skimage import data
from skimage import filters
from scipy import ndimage
from skimage import data
from skimage import filters
import matplotlib.pyplot as plt
import pickle 


def Plot_Slice(my_data,my_out,npreds,mask_scaled,LungMask,NumCase,NumSlice):

    plt.figure(figsize=(15,15))
    plt.subplot(161) # original
    plt.imshow(my_data[NumCase][0,NumSlice,:,:,0])

    plt.subplot(162) # removed
    plt.imshow(my_out[NumCase][NumSlice,:,:,0])

    plt.subplot(163) # generated mask
    plt.imshow(npreds)

    plt.subplot(164) # Real mask
    plt.imshow(mask_scaled[NumCase][0,NumSlice,:,:,0])


def sensitivityScore(label_trues,label_preds):
    sensitivity = []
    if label_trues.sum()>163:
        score_sen = (label_trues*label_preds).sum()/(label_trues.sum()+1e-9) 
        sensitivity.append(score_sen)       
    return np.array(sensitivity).mean()

def specificityScore(label_trues,label_preds):
    specificity = []
    if label_trues.sum()>163:
        score_spef = ((1-label_trues)*(1-label_preds)).sum()/((1-label_trues).sum()+1e-9) 
        specificity.append(score_spef)       
    return np.array(specificity).mean()


def DiceScore(label_trues,label_preds):
    dice = []
    if label_trues.sum()>163:
        score = (2*(label_trues*label_preds).sum())/(label_trues.sum()+label_preds.sum()+1e-9) 
        dice.append(score)       
    return np.array(dice).mean()


def PlotingResults(dice_list,InfectionPercent,ScoreName=''):
    dice_list = np.array(dice_list)
    InfectionPercent = np.array(InfectionPercent)
    Data_up1per= dice_list[np.where(( (InfectionPercent> 1) ))]
    print(ScoreName,"Mean:", 100*np.array(Data_up1per)[~np.isnan(Data_up1per)].mean() ,ScoreName,"Std:", 100*np.array(Data_up1per)[~np.isnan(Data_up1per)].std() )



def EvaluateMain(my_data,my_out,mask_scaled,LungMask,Threshold,thresholdMethod,PlotingCase,PlotingSlice,PostPro):
    maxval=1
    dice_list_p = []
    sensitivity_list_p = []
    specificity_list_p = []
    InfectionPercent = []

    for i in tqdm(range(len(my_data))):
        for j in range(my_data[i].shape[1]):
            InfectionPercent.append( (100*mask_scaled[i][0,j,:,:,0].sum())/(LungMask[i][j,:,:].sum()+(10**-9)) )
            diff = my_out[i][j,:,:,0]
            
            # Thresholding 
            npreds = (diff > Threshold*np.amax(diff)) * maxval
            # npreds = filter_isolated_cells(npreds, struct=np.ones((3,3)))

            #### Dice Scores 
            dice_list_p.append(DiceScore(np.reshape(mask_scaled[i][0,j,:,:,0],(128*128)), np.reshape( npreds ,(128*128) )))

            #### Sensitivity
            sensitivity_list_p.append(sensitivityScore(np.reshape(mask_scaled[i][0,j,:,:,0],(128*128)), np.reshape( npreds ,(128*128) )))
            
            #### specificity
            specificity_list_p.append(specificityScore(np.reshape(mask_scaled[i][0,j,:,:,0],(128*128)), np.reshape( npreds ,(128*128) )))

    return dice_list_p ,sensitivity_list_p ,specificity_list_p ,InfectionPercent